# Workflow para geração de relatórios PostgreSQL com PGBadger

name: Logs PostgreSQL com PGBadger

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Escolha o ambiente (0 = nome-do-ambiente-0, 1 = nome-do-ambiente-1, ....)'
        required: true
        default: '1'
      start_datetime:
        description: 'Data/hora início (UTC) - formato: YYYY-MM-DD HH:MM'
        required: true
        default: '2025-05-28 04:00'
      end_datetime:
        description: 'Data/hora fim (UTC) - formato: YYYY-MM-DD HH:MM'
        required: true
        default: '2025-05-28 04:09'

jobs:
  pgbadger-report:
    name: Gerar Relatório PostgreSQL com PGBadger
    runs-on:
      group: k8s_prod
    env:
      # Variáveis de ambiente sensíveis, fornecidas via GitHub Secrets
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
      # Step 1: Checkout do repositório usando token customizado
      - name: Clonar repositório
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.BUILD_NAVITA }} # Token customizado para acesso ao repositório

      # Step 2: Instalação do Python 3.11
      - name: Instalar Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Step 3: Instalação das dependências Python necessárias
      - name: Instalar dependências Python
        run: |
          pip install oci
        # Adicione outras dependências aqui se necessário

      # Step 4: Instalação do pgbadger
      - name: Instalar pgbadger
        run: |
          sudo apt update
          sudo apt install -y pgbadger
        # O pgbadger é necessário para análise dos logs PostgreSQL

      # Step 5: Execução do script Python para download/conversão dos logs
      - name: Executar script do pgbadger
        run: |
          python3 scripts/logs_pgbadger/download-and-convert.py
        env:
          # Inputs do workflow são passados como variáveis de ambiente para o script
          PG_ENV: ${{ github.event.inputs.environment }}
          PG_START: ${{ github.event.inputs.start_datetime }}
          PG_END: ${{ github.event.inputs.end_datetime }}
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        # O script deve gerar os relatórios HTML em /tmp/pgbadger-output/

      # Step 6: Upload dos relatórios gerados como artefato do workflow
      - name: Publicar relatórios pgbadger
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-pgbadger
          path: /tmp/pgbadger-output/*.html
          compression-level: 9
          retention-days: 2
        # Os relatórios ficarão disponíveis para download por 2 dias
